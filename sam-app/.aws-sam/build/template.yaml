AWSTemplateFormatVersion: '2010-09-09'
Description: sam-app
Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    Cors:
      AllowMethods: '''GET,POST,OPTIONS'''
      AllowHeaders: '''content-type'''
      AllowOrigin: '''*'''
Resources:
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SampleTable
      Environment:
        Variables:
          SAMPLE_TABLE:
            Ref: SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
      CodeUri: getAllItemsFunction
    Metadata:
      SamResourceId: getAllItemsFunction
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SampleTable
      Environment:
        Variables:
          SAMPLE_TABLE:
            Ref: SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
      CodeUri: getByIdFunction
    Metadata:
      SamResourceId: getByIdFunction
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SampleTable
      Environment:
        Variables:
          SAMPLE_TABLE:
            Ref: SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
      CodeUri: putItemFunction
    Metadata:
      SamResourceId: putItemFunction
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-bucket-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          TargetOriginId: MyCDN
          ViewerProtocolPolicy: allow-all
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
        Enabled: true
        Origins:
        - DomainName:
            Fn::GetAtt:
            - Bucket
            - RegionalDomainName
          Id: MyCDN
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub:
              - origin-access-identity/cloudfront/${OriginAccessIdentity}
              - OriginAccessIdentity:
                  Ref: DistributionOriginAccessIdentity
  DistributionOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: MyCDN
  DistributionBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: Bucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                ${DistributionOriginAccessIdentity}
          Action: s3:GetObject
          Resource:
            Fn::Sub:
            - ${BucketArn}/*
            - BucketArn:
                Fn::GetAtt:
                - Bucket
                - Arn
  extractText:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: extractText
      CodeUri: extractText
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        Version: '2012-10-17'
        Statement:
        - Action: textract:DetectDocumentText
          Resource: '*'
          Effect: Allow
          Sid: DetectDocumentText
        - Action: s3:*
          Resource: '*'
          Effect: Allow
          Sid: ReadImageFromBucket
      Environment:
        Variables:
          SAMPLETABLE_TABLE_NAME:
            Ref: SampleTable
          SAMPLETABLE_TABLE_ARN:
            Fn::GetAtt:
            - SampleTable
            - Arn
      Events:
        ImageBucket:
          Type: S3
          Properties:
            Bucket:
              Ref: ImageBucket
            Events:
            - s3:ObjectCreated:*
            - s3:ObjectRemoved:*
    Metadata:
      SamResourceId: extractText
  extractTextLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${extractText}
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-imagebuck-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  ImageBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ImageBucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
        - Principal: '*'
          Action: '*'
          Effect: Deny
          Resource:
          - Fn::GetAtt:
            - ImageBucket
            - Arn
          - Fn::Sub: ${ImageBucket.Arn}/*
          Condition:
            Bool:
              aws:SecureTransport: 'false'
  uploadImage:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: uploadImage
      CodeUri: uploadImage
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ServerlessRestApiPOSTupload:
          Type: Api
          Properties:
            Path: /upload
            Method: POST
      Environment:
        Variables:
          IMAGEBUCKET_BUCKET_NAME:
            Ref: ImageBucket
          IMAGEBUCKET_BUCKET_ARN:
            Fn::GetAtt:
            - ImageBucket
            - Arn
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:GetObjectAcl
          - s3:GetObjectLegalHold
          - s3:GetObjectRetention
          - s3:GetObjectTorrent
          - s3:GetObjectVersion
          - s3:GetObjectVersionAcl
          - s3:GetObjectVersionForReplication
          - s3:GetObjectVersionTorrent
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          - s3:ListBucketVersions
          - s3:ListMultipartUploadParts
          - s3:AbortMultipartUpload
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:PutObject
          - s3:PutObjectLegalHold
          - s3:PutObjectRetention
          - s3:RestoreObject
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${ImageBucket}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${ImageBucket}/*
      - Statement:
        - Action: textract:DetectDocumentText
          Resource: '*'
          Effect: Allow
          Sid: DetectDocumentText
    Metadata:
      SamResourceId: uploadImage
  uploadImageLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${uploadImage}
  generateRecipe:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: generateRecipe
      CodeUri: generateRecipe
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ServerlessRestApiPOSTrecipe:
          Type: Api
          Properties:
            Path: /recipe
            Method: POST
      Policies:
      - Statement:
        - Action: bedrock:InvokeModel*
          Resource: '*'
          Effect: Allow
          Sid: InvokeBedrockModel
    Metadata:
      SamResourceId: generateRecipe
  generateRecipeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${generateRecipe}
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
